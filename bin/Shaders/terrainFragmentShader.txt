 #version 400 core
 
in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;
 
 out vec4 out_colour;
 
 uniform sampler2D backgroundTexture;
 uniform sampler2D rTexture;
 uniform sampler2D gTexture;
 uniform sampler2D bTexture;
 uniform sampler2D blendMap;
 
 uniform sampler2D textureSampler;
 
 
 
 
 uniform vec3 lightColour;
 uniform float shineDamper = 10000;
 uniform float reflectivity = 0;
 uniform vec3 skyColor;
 
 void main(void){
 
 	//Setting up BlendMap configurations
 	
 	vec4 blenMapColour = texture(blendMap, pass_textureCoords);
 	
 	float backTextureAmount = 1 - (blenMapColour.r + blenMapColour.g + blenMapColour.b);
	vec2 tileCoords = pass_textureCoords * 40.0;
	vec4 backgroundTextureColour = texture(backgroundTexture,tileCoords) * backTextureAmount;
	vec4 rTextureColour = texture(rTexture,tileCoords) * blenMapColour.r;
	vec4 gTextureColour = texture(gTexture,tileCoords) * blenMapColour.g;
	vec4 bTextureColour = texture(bTexture,tileCoords) * blenMapColour.b;
	
	vec4 totalColour = backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour;
	
 
 	vec3 unitNormal = normalize(surfaceNormal);
 	vec3 unitLightVector = normalize(toLightVector);
 	
 	float nDot1 = dot(unitNormal, unitLightVector);
 	float brightness = max(nDot1, 0.20);
 	vec3 diffuse = brightness * lightColour; 
 
 	vec3 unitVectorToCamera = normalize(toCameraVector);
 	vec3 lightDirection = -unitLightVector;
 	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
 	
 	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
 	specularFactor = max(specularFactor, 0.0);
 	float dampedFactor = pow(specularFactor, shineDamper);
 	vec3 finalSpecular = dampedFactor * lightColour;
 	
 	out_colour = vec4(diffuse,1.0) * totalColour + vec4(finalSpecular, 1.0);
 	out_colour = mix(vec4(skyColor,1.0),out_colour,visibility);
 }